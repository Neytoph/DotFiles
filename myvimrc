set nocompatible  " be IMproved
set mouse=a

let mapleader = ','

set clipboard+=unnamed " 共享剪贴板
filetype off " 是否启用文件类型侦测

" vundle 配置块开始   >>>>>>>>>>>>>>>>>>
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'bling/vim-airline'
Plugin 'yonchu/accelerated-smooth-scroll' " 提供平滑滚动
Plugin 'ervandew/supertab'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/git-nerdtree'

" Indent
Plugin 'jelera/vim-javascript-syntax.git'
Plugin 'guileen/simple-javascript-indenter.git'
Plugin 'mattn/emmet-vim'
" complete
Plugin 'Shougo/neocomplcache.vim'
Plugin 'shawncplus/phpcomplete.vim'
" for php
Plugin 'donnut/vim-php54-syntax'
Plugin '2072/PHP-Indenting-for-VIm.git'
Plugin 'stephpy/vim-phpdoc.git'
" theme
" Plugin 'lsdr/monokai'

" for golang
Plugin 'fatih/vim-go'

" python
Plugin 'hynek/vim-python-pep8-indent'

" neo
Bundle 'Shougo/neocomplete'

Bundle 'Shougo/neosnippet'
Bundle 'Shougo/neosnippet-snippets'

" git
Plugin 'airblade/vim-gitgutter'

call vundle#end()            " required
filetype plugin indent on    " required
" vundle 配置块结束  <<<<<<<<<<<<<<<<<<<<

syntax on " 语法高亮

" common set
set nobackup
set noswapfile
set encoding=utf-8
set autoread
set autowrite
set fileformats=unix,dos,mac
set backspace=indent,eol,start whichwrap+=<,>,[,]  " 允许退格键的使用

" hlsearch set
set incsearch             " 搜索时逐个高亮搜索词
" set highlight           " 
set ignorecase smartcase  " 搜索时忽略大小写 smartcase 表示有一个以上大写字母时对大小写敏感
set laststatus=2          " 总是显示状态行
set hlsearch              " 搜索时高亮被显示的文本
set noerrorbells          "
set showcmd               " 在状态栏显示目前所执行的指令
set showmode              " 在状态栏显示目前的MODE
set cursorline            " 高亮当前行
set completeopt-=preview
" set viusalbell          " 以屏幕显示代替deep声
set rnu                   " 在每行前显示相对于光标所在的行的行号
set numberwidth=2         " 行数使用的最小列数
set number                " 显示行数

" set listchars=trail:·,tab:>-
set listchars=trail:░,tab:>-
set list

set ruler                 " 打开状态栏标尺
set softtabstop=4         " 使得按退格键可以一次删除4个空格

" set cc=81                 " 代码行数不要超过80列, 会在视窗所设列显示一个大竖杠-_-||
set scrolloff=3           " 光标移动到buffer的顶部和底部时保持3行距离
set autoindent            " 继承前一行的缩进方式，特别适用于多行注释
set smartindent           " 智能缩进

set tabstop=4             " 制表符长度
set softtabstop=4         " 统一缩进为4
set shiftwidth=4          "

set expandtab             " 制表符翻译为空格

if has('gui_macvim')
    colorscheme Molokai
    let g:molokai_original = 1
    let g:rehash256 = 1
    " set fuoptions=maxvert
    " set guifont=Source\ Code\ Pro:h12
    set guifont=Monaco:h13
    " set guifont=TheMixMono-Regular:h12
    set linespace=2
    " set guioptions-=T  "no toolbar
    " set guioptions-=l
    " set guioptions-=L
    " set guioptions-=r
    " set guioptions-=R
    let g:ctrlp_working_path_mode = 'ra'
else
    colorscheme Molokai
    let g:molokai_original = 1
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=8
endif


" vundle 插件配置 >>>>>>>>
" airline unicode symbols
let g:airline_linecolumn_prefix = '␊ '
let g:airline_linecolumn_prefix = '␤ '
let g:airline_linecolumn_prefix = '¶ '
let g:airline_branch_prefix = '⎇ '
let g:airline_paste_symbol = 'ρ'
let g:airline_paste_symbol = 'Þ'
let g:airline_paste_symbol = '∥'
let g:airline_whitespace_symbol = 'Ξ'
let g:airline_enable_branch = 1
let g:airline_enable_syntasic = 1
" for vim-go
au FileType go nmap <Leader>i <Plug>(go-import)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

let g:go_fmt_autosave = 0
" nerdtree
let NERDTreeIgnore = ['\.pyc$']
nmap <leader>k :NERDTreeToggle<cr>

" neocomplacache and superTab setting
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_disable_auto_complete = 1
"let g:SuperTabDefaultCompletionType = '<C-X><C-O>'
let g:SuperTabLongestEnhanced = 1
let g:SuperTabLeadingSpaceCompletion = 0
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType ="<C-X><C-U>"

" neocomplete
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplete#force_overwrite_completefunc=1  " fix Another plugin set completefunc! Disabled neocomplete.


" <<<<<<<<
